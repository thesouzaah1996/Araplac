# =========================
# 1) BUILD: compila o JAR
# =========================
FROM maven:3.9.9-eclipse-temurin-24 AS builder
WORKDIR /app
COPY pom.xml .
RUN mvn -q -DskipTests dependency:go-offline
COPY src ./src
RUN mvn -q -DskipTests package

# =========================================
# 2) RUNTIME: JRE + Nginx + JAR do Spring
# =========================================
FROM eclipse-temurin:24-jre
WORKDIR /app

# Instala Nginx (imagem base Ã© Debian)
RUN apt-get update \
 && apt-get install -y --no-install-recommends nginx ca-certificates \
 && rm -rf /var/lib/apt/lists/*

# Copia o JAR gerado
COPY --from=builder /app/target/*.jar /app/app.jar

# Configura o Nginx como proxy para o Spring em 127.0.0.1:8080
RUN set -eux; \
  rm -f /etc/nginx/sites-enabled/default; \
  mkdir -p /etc/nginx/conf.d; \
  printf '%s\n' \
    'server {' \
    '  listen 80;' \
    '  server_name _;' \
    '  location / {' \
    '    proxy_pass http://127.0.0.1:8080;' \
    '    proxy_set_header Host $host;' \
    '    proxy_set_header X-Real-IP $remote_addr;' \
    '    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' \
    '    proxy_set_header X-Forwarded-Proto $scheme;' \
    '    proxy_http_version 1.1;' \
    '  }' \
    '}' \
  > /etc/nginx/conf.d/default.conf

EXPOSE 80
# Se precisar, ajuste flags: ENV JAVA_OPTS="-Xms256m -Xmx512m"
ENV JAVA_OPTS=""

# Sobe o Nginx e deixa o Spring (Java) em foreground
CMD ["/bin/sh","-lc","nginx && exec java $JAVA_OPTS -jar /app/app.jar"]
